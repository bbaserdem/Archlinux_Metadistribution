# Installation script for sbp-archlinux
pkggroups=(
    'adm'
    'ftp'
    'games'
    'http'
    'log'
    'rfkill'
    'sys'
    'uucp'
    'wheel'
    'kvm'
    'libvirt'
    'optical'
    'video'
)
prestr='sbp-archlinux'

# Function for enabling/disabling systemd services
systemd_services() {
    if [ "${1}" = 'enable' ] ; then
        action='enable'
        prstrn='Enabling'
    elif [ "${1}" = 'disable' ] ; then
        action='disable'
        prstrn='Disabling'
    elif [ -z "${1}" ] ; then
        action='enable'
        prstrn='Enabling'
    else
        echo "Invalid action type"
        exit 1
    fi
    echo '['"${prestr}"']==> '${prstrn}' systemd services!'

    echo '['"${prestr}"']==> '"${prstrn}"' ACPI event responder daemon'
    /usr/bin/systemctl "${action}" acpid.service

    echo '['"${prestr}"']==> '"${prstrn}"' Zeroconf network advertiser daemon'
    /usr/bin/systemctl "${action}" avahi-daemon.service

    echo '['"${prestr}"']==> '"${prstrn}"' Bluetooth'
    /usr/bin/systemctl "${action}" bluetooth.service

    echo '['"${prestr}"']==> '"${prstrn}"' CUPS daemon for printing'
    /usr/bin/systemctl "${action}" cups.service

    echo '['"${prestr}"']==> '"${prstrn}"' Network services.'
    /usr/bin/systemctl "${action}" dhcpcd.service
    /usr/bin/systemctl "${action}" unbound.service
    /usr/bin/systemctl "${action}" iwd.service

    echo '['"${prestr}"']==> '"${prstrn}"' Docker management'
    /usr/bin/systemctl "${action}" docker.service

    echo '['"${prestr}"']==> '"${prstrn}"' Out Of Memory preventor'
    /usr/bin/systemctl "${action}" earlyoom.service

    echo '['"${prestr}"']==> '"${prstrn}"' cron, scheduler daemon'
    /usr/bin/systemctl "${action}" fcron.service

    echo '['"${prestr}"']==> '"${prstrn}"' Firewall.'
    /usr/bin/systemctl "${action}" firewalld.service

    echo '['"${prestr}"']==> '"${prstrn}"' Virtualization management'
    /usr/bin/systemctl "${action}" libvirtd.service

    echo '['"${prestr}"']==> '"${prstrn}"' Network Time Protocol daemon'
    /bin/systemctl "${action}" ntpd.service

    echo '['"${prestr}"']==> '"${prstrn}"' Machine check exception (MCE) monitoring'
    /usr/bin/systemctl "${action}" ras-mc-ctl.service
    /usr/bin/systemctl "${action}" rasdaemon.service

    echo '['"${prestr}"']==> '"${prstrn}"' Periodic FS trimming'
    /usr/bin/systemctl "${action}" fstrim.timer

    echo '['"${prestr}"']==> '"${prstrn}"' Snapper snapshots'
    /usr/bin/systemctl "${action}" snapper-cleanup.timer
    /usr/bin/systemctl "${action}" snapper-timeline.timer

    echo '['"${prestr}"']==> '"${prstrn}"' Systemd services, done!'
}

post_install() {
    echo '['"${prestr}"']==> Installing meta package...'

    # Make a user account
    if /bin/getent passwd sbp >/dev/null 2>&1 ; then
        echo '['"${prestr}"']==> User sbp exists!'
    elif [ -d '/home/sbp' ] ; then
        echo '['"${prestr}"']==> Creating user sbp (home directory exists).'
        /bin/useradd \
            --comment "Batuhan Başerdem" \
            --user-group \
            --shell /usr/bin/zsh \
            sbp
    else
        echo '['"${prestr}"']==> Creating user sbp.'
        /bin/useradd \
            --create-home \
            --comment "Batuhan Başerdem" \
            --user-group \
            --shell /usr/bin/zsh \
            sbp
    fi

    # Adding user to the groups
    echo '['"${prestr}"']==> Adding user sbp to groups.'
    for grp in "${pkggroups[@]}" ; do
        /bin/gpasswd --add sbp "${grp}"
    done

    # Change roots' shell to zsh
    echo '['"${prestr}"']==> Changing shell for root user.'
    /bin/chsh --shell /bin/zsh root

    # Timezone
    echo '['"${prestr}"']==> Setting local time settings.'
    /usr/bin/timedatectl set-ntp true
    /usr/bin/hwclock --systohc

    # Services
    systemd_services enable

    # Resolvconf
    echo '['"${prestr}"']==> Updating resolvconf'
    /usr/bin/resolvconf -u

    echo '['"${prestr}"']==> Installation done!'
}

post_upgrade() {
    echo '['"${prestr}"']==> Upgrading meta package...'

    # Locale
    echo '['"${prestr}"']==> Generating locale'
    /usr/bin/locale-gen

    # Timezone
    echo '['"${prestr}"']==> Setting local time settings.'
    /usr/bin/timedatectl set-ntp true
    /usr/bin/hwclock --systohc

    # Adding user to the groups
    echo '['"${prestr}"']==> Adding user sbp to groups.'
    for grp in "${pkggroups[@]}" ; do
        /bin/gpasswd --add sbp "${grp}"
    done

    # Resolvconf
    echo '['"${prestr}"']==> Updating resolvconf'
    /usr/bin/resolvconf -u

    # Services
    systemd_services enable

    echo '['"${prestr}"']==> Upgrade done!'
}

post_remove() {
    echo '['"${prestr}"']==> Uninstalling meta package...'
    echo '['"${prestr}"']==> Not changing the user sbp!'
    echo '['"${prestr}"']==> Not stopping the systemd services!'
    echo '['"${prestr}"']==> Uninstallation done!'
}
